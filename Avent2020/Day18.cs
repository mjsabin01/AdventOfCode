using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Avent2020
{
    public class Day18
    {
        public enum EquationPartType
        {
            Number,
            OpAdd,
            OpMult,
            Group
        }

        public class EquationPart
        {
            public EquationPartType Type { get; set; }

            public long Number { get; set; }

            public string Group { get; set; }

            public override string ToString()
            {
                if (Type == EquationPartType.OpAdd)
                    return "+";
                if (Type == EquationPartType.OpMult)
                    return "*";
                if (Type == EquationPartType.Group)
                    return Group;
                return Number.ToString();
            }
        }

        public void Run()
        {
            var input = Input;
            var lines = input.Split("\r\n");
            long sum = 0;
            foreach (var line in lines)
            {
                var ans = SolveEquationPt2(line);
                Console.WriteLine($"Value of '{line}' is {ans}");
                sum += ans;
            }

            Console.WriteLine($"Overall sum is {sum}");
        }

        long SolveEquationPt1(string input)
        {
            var parts = ExtractPartsFromInput(input);

            long total = -99;
            EquationPart op = null;
            foreach (var part in parts)
            {
                long val = 0;
                if (part.Type == EquationPartType.Group)
                {
                    val = SolveEquationPt1(part.Group);
                }
                else if (part.Type == EquationPartType.OpAdd || part.Type == EquationPartType.OpMult)
                {
                    op = part;
                    continue;
                }
                else
                {
                    val = part.Number;
                }

                if (total == -99)
                {
                    total = val;
                    continue;
                }

                if (op.Type == EquationPartType.OpAdd)
                {
                    total += val;
                }
                if (op.Type == EquationPartType.OpMult)
                {
                    total *= val;
                }
            }

            return total;
        }

        long SolveEquationPt2(string input)
        {
            var parts = ExtractPartsFromInput(input);

            long total = -99;
            EquationPart op = null;
            var additionFound = false;
            do
            {
                additionFound = false;
                for (int i = 1; i < parts.Count; i += 2)
                {
                    op = parts[i];
                    var left = parts[i - 1];
                    var right = parts[i + 1];

                    if (parts[i].Type == EquationPartType.OpAdd)
                    {
                        var leftVal = left.Type == EquationPartType.Number ? left.Number : SolveEquationPt2(left.Group);
                        var rightVal = right.Type == EquationPartType.Number ? right.Number : SolveEquationPt2(right.Group);
                        var sumPart = new EquationPart() { Type = EquationPartType.Number, Number = leftVal + rightVal };

                        var newParts = new List<EquationPart>();
                        if (i > 1)
                        {
                            newParts.AddRange(parts.GetRange(0, i - 1));
                        }
                        newParts.Add(sumPart);
                        if (i + 2 < parts.Count)
                        {
                            newParts.AddRange(parts.GetRange(i + 2, parts.Count - i - 2));
                        }

                        parts = newParts;
                        additionFound = true;
                        break;
                    }
                }
            } while (additionFound) ;

            foreach (var part in parts)
            {
                long val = 0;
                if (part.Type == EquationPartType.Group)
                {
                    val = SolveEquationPt2(part.Group);
                }
                else if (part.Type == EquationPartType.OpAdd || part.Type == EquationPartType.OpMult)
                {
                    op = part;
                    continue;
                }
                else
                {
                    val = part.Number;
                }

                if (total == -99)
                {
                    total = val;
                    continue;
                }

                if (op.Type == EquationPartType.OpAdd)
                {
                    total += val;
                }
                if (op.Type == EquationPartType.OpMult)
                {
                    total *= val;
                }
            }

            return total;
        }

        List<EquationPart> ExtractPartsFromInput(string input)
        {
            var parts = new List<EquationPart>();
            var startIndex = 0;
            var currentIndex = 0;
            var nestingLevel = 0;
            while (currentIndex < input.Length)
            {
                if (input[currentIndex] == ' ' && nestingLevel == 0)
                {
                    if (startIndex == currentIndex)
                    {
                        currentIndex++;
                        startIndex = currentIndex;
                        continue; // after group
                    }

                    var strPart = input.Substring(startIndex, currentIndex - startIndex);
                    parts.Add(CreatePartFromInput(strPart));

                    startIndex = currentIndex + 1;
                }

                if (input[currentIndex] == '(')
                {
                    nestingLevel++;
                }

                if (input[currentIndex] == ')')
                {
                    nestingLevel--;
                    if (nestingLevel == 0)
                    {
                        var groupPart = new EquationPart() { Type = EquationPartType.Group, Group = input.Substring(startIndex + 1, currentIndex - startIndex - 1) };
                        parts.Add(groupPart);
                        startIndex = currentIndex + 1;
                    }
                }

                currentIndex++;
            }

            // if we didn't end in a group, then need to add entry for last value
            if (startIndex != currentIndex)
            {
                var strPart = input.Substring(startIndex, currentIndex - startIndex);
                parts.Add(CreatePartFromInput(strPart));
            }

            return parts;
        }

        EquationPart CreatePartFromInput(string input)
        {
            if (input == "+")
            {
                return new EquationPart() { Type = EquationPartType.OpAdd };
            }
            else if (input == "*")
            {
                return new EquationPart() { Type = EquationPartType.OpMult };
            }
            return new EquationPart() { Type = EquationPartType.Number, Number = long.Parse(input) };
        }

        string TestInput1 = @"2 * 3 + (4 * 5)
5 + (8 * 3 + 9 + 3 * 4 * 3)
5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2";

        string TestInput2 = @"1 + (2 * 3) + (4 * (5 + 6))
2 * 3 + (4 * 5)
5 + (8 * 3 + 9 + 3 * 4 * 3)
5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2";

        string Input = @"6 * ((4 * 8 + 4) + (3 * 5 + 3 + 3 * 7 * 5)) + 7 + (9 * (6 + 9 * 7 + 2 * 6 * 6)) + 2
6 + 6 * (8 + 9 * 6 * 7 + 4 * 8) * (3 * 2 + 8 * (5 * 8 + 6 * 3 * 7 + 4))
((2 + 5 * 5 + 8 + 3 + 4) + 8 * 7 * 6) * 9 * 8 + 2
(2 + 7 * (3 + 5 * 2 + 3 + 6) * (4 * 6 + 8 * 3 * 2 + 7)) + 3 * ((2 + 8 + 6) * 8 + 9 * 6 * 6) + 5 + 6 + 5
((5 * 8 * 4 + 6 * 9) + 2 * 7 + 2 + (6 * 7 + 6)) + 6 + 6 * 9 * (2 * 8 * (3 + 7) * 9) * 7
6 * 4 + 8 + (2 * (4 * 3 * 7 * 4) * 3)
6 + 8 + ((3 + 7 + 4 + 9 + 6) * 7 + 9 + 2 * 4 * 6) * (3 + 6 * 5 * 2 * 4) * 3 + 9
(5 * 5 * 5 * 7 + 9) * 7 * 5
9 + 5 + (2 + (2 * 3 + 5 * 9) * 6) * 2 * (2 * (4 + 5 + 2 + 9 + 3))
8 + 7 + (2 + 4 + 5 + 9) * (7 + 4) * 7
9 * (3 + 9 + 5 + 7) * 5 + 6
2 + 3 + 4
8 * 4
6 * 4 * (2 * 7 * 7 * 2) * 4
2 * (6 + 5) + 5
(5 + 6 * 2 * 3) * (3 + 8 + 4 + 2 + 6) * 8
((7 + 7 * 3 + 3 + 7) * 3 + 7 + 2 * (3 * 8 * 2 + 2 * 7 * 4) + 9) + 4 + 3 * 7
6 + 8 + ((4 + 9 + 5 + 9 + 5 + 6) * 6 * (3 * 5 + 2 * 8) * 9 * 5 + 9)
(4 * 2) + 7 + 9 + 8 + ((2 * 9 * 4 + 3 + 7 + 8) + 7 * 9)
2 * 3 + 3 * 8
9 * 6 * 3 * 8 * ((8 * 4 * 2 * 6) + 3 * 8)
7 * 8 + 5 * 8 * 9
7 * ((3 * 3 + 4 + 4) * 3) + 8 + 7 + 2 * 8
2 * (9 + 9 * (8 * 9))
(8 + 6 + 9 * (5 + 5 + 5) * 6 * 9) * ((2 + 7 * 6 + 2) + 4 * 9 * 8 * (5 * 2 + 5 + 2 + 5))
(6 * 9) + 5 * 8 * 8 + 8 * (7 + 4 + 6 * (9 * 9) + 8)
2 * 9 + 3 * ((3 * 7 * 4 * 3 + 3 * 8) * (8 + 6 + 3 * 8 + 6) + 5 + 3 + 7 + 5) + 9 * (3 + 3 + 6 + 4)
((9 + 2 * 7 * 8 + 7) + 3 * (6 + 9 * 3)) + 7
4 * (8 * (6 + 3 * 4))
4 + 3 + 7 + 4 + 2 * 7
7 * 8 * 5 + 7
(7 * 9) * (2 * 9 + 5 + (5 + 2)) + ((9 + 7 + 9 * 7 * 4 + 8) * (6 * 7 + 4) + 3 * 7 + 4 * 8)
(8 * 6 * 9 * 7 + 2 * 2) * 8 * 2 * 9 + (8 + 9 * 7 * 8 * 7) + (5 * 5)
9 * 4 + 8 + (8 * 6 * 4 + (5 * 6 * 3 * 6 + 3) + 5) * 9 + 4
7 * (7 * 8 * 9) * 2
(3 + 3 + (8 + 5 * 6) + 7 + (9 + 8 + 2 * 3 * 9 + 2)) + (3 + 4 + (9 * 5 * 2 + 2 + 8) + (4 * 3 + 4)) + 8 * 6 * ((9 + 8) + 9 * 3)
3 + 2 + 7
(6 + 6 + 6 * 3 + (5 + 5 * 4)) * (3 * (9 + 2 + 4 * 5 * 3 * 3)) + (3 + 6 + 6 + 5 + 6 * 8)
(9 + (9 * 7 + 7 * 4 + 2) + (8 * 8) + 5 + 9 * 2) * 5 * (5 * 9 * 5 + 8 * 6)
2 + 5 + (2 + 2 + (7 * 2 * 7)) * (2 * (6 * 5 + 9 * 4)) * 4
5 + 7
7 + 5 * 4 * ((8 + 6 + 9 * 7 * 7 + 6) + 3 + 3 + 5) * (8 + (4 * 2 * 9) * 5 * 6 + (2 * 8 + 2 * 7)) + 8
6 * 7 * (2 * 3) * 3 * 3
6 * 3 + 8 * (4 * 7 + 9) + 4 * 7
4 + 2 + ((3 + 7) + (4 + 9))
4 + 8 * 6 * 5 * 7 + (7 * (8 + 5 + 5 + 2 + 3 * 5) * (6 + 3) + (2 * 3 * 5 + 4))
4 + (7 * 7 * (5 * 4 + 8) * 2) + 8 * 3
(4 * 9 * 8 * 9 * (6 * 7 + 2 * 5 + 6)) * ((4 + 2 * 5 + 9 * 9) * 3 + 8 * 2) + 9 + 9 + 2
4 * 5 + 9 * (4 * (8 + 8 * 5))
7 + (7 * 5 * (5 * 6) + 2 * 2) + (6 * 3 * (7 * 9 + 2 * 6)) + 5 * 7 + ((7 * 4 * 4 + 8 * 8 * 6) * (8 * 8 * 7 + 9 * 3 + 2) * 2 * 5)
(8 + 3 * 6 * 6 * 2 + 4) + 4
9 * 8 * (9 + 8)
((9 * 4 + 5 + 5) + 2 + 8 * 6) * 6 * 5 * 9
(7 * 3) + 3 * 8 * 3 * 7 + 8
8 + (9 * 7 * (6 + 2)) * 9
((6 + 9 * 2 + 7 + 4) * 5) * 7 + (6 + 3 * 9 + 5 + 9 * 4) + (3 * 6 * 3 + 8) + ((4 * 3 + 2 + 2) + 9 * 5 + 5 * 5)
(8 * (8 * 6 + 2) * 4) * 4 * 6
2 + 9 + (3 * 9 * 4 + (7 * 7)) + 7
(2 * 3 + 2) + ((8 + 4 + 6 * 7 * 8 * 3) * 8 + (3 + 2 + 3 * 8 * 6 + 3) + 8)
2 * (9 * 7 * (4 + 5 + 8)) + (3 + (7 + 2 * 6 + 2) + 7 * 2 * 9 * 7) + 2 * 4 * 3
5 + ((9 * 6 * 6) + (6 * 6 + 5) * 2) * 9 + 7 * ((8 * 8 * 2 + 2) + (4 * 9)) + (7 + 2 * 4 + 7 + 6)
((7 * 9 + 8 * 6 * 4 + 8) + (9 + 9 + 6 * 4) + 6) * 3 * 8
2 * 5 + 6 + 7 * (6 * (7 * 5 + 2 * 2) + 7 * 8)
4 * (4 * 4 * 2 + 3 * 9 + 7) * 7 + 6
7 + 3 * 4 + 2 * 8
6 + 3 * 8
5 + ((6 + 2 * 3 + 4) + 8 + 4 + 5 * 6 * 6)
(2 + (6 + 3 + 4 + 9) * (7 + 3 + 2 + 7 * 9) + (2 * 2 * 7 + 9 * 7) + 4 + 4) + ((5 + 5) + 4 + 5 + 2 * 2) + 2 + 4 * 6
(5 * (4 + 4 * 5 * 7 + 9 + 6) * 9) * 6 + 2
(6 + 2 + (8 * 9 + 2) + 8 + 5 + (7 + 2)) * 6
(9 * 3 * (8 * 7 + 6 + 7 * 3)) + 3
(4 + 4 + 2 * 9 + (5 * 9 * 3 + 7) + 9) * 2 + 6
4 * ((9 * 3 + 9) + 4) * 9
(5 + 3 + 4) * ((5 + 4 + 3 * 6) * 7 * 2 * 6 * 8) + 3 * 9 + 7 + 5
(3 + 4 * 8 + 8 + 3) * 4 * 7 * ((7 + 8 * 3 + 7 * 7 * 8) + 2 + 4 + (7 + 6 * 4) + 2 * 6)
4 * (8 + 2 * 8) * 6 * 7 * 9 + 5
5 + 3 + 6 + 8 * (2 + (4 * 5 * 2 + 9 * 9))
(3 + 6 + 5) * 2 * 9 + 3
(7 * 5 * 2 * 2 + 5) * 6
7 * 8 * (3 * 5 + (4 * 7) + 6) + 6 + (5 * (7 * 3) * 3 * 5) * 6
(8 + (6 + 2 * 2 * 6) + 3 + 9 + 5) * 3 + 6 * 7 + 4
(5 * 8 + (8 + 6 * 7 * 7 * 3)) + (6 + 7 + (5 + 7 + 7 + 4 * 8) + 8 * 5 + 2) * (5 + (5 * 4 * 9 + 7 * 9 * 6))
9 * (9 * 2) * 2 * 5
2 + 3 * 8 * 6 + 7 * 2
4 + 2 * 6 * 5 * 6 + (4 + 7 * 6 * (2 * 7 + 5 + 6 * 7 + 6))
((4 * 6 + 5 + 5) * 5 * 4 + 8 * 8) * 3 + 5
8 * 5 * 5 * (3 * 8 + 3 + 5 + 9 * (5 + 4 * 5 + 3 * 2))
8 + 4 * 7 * 3 * 4
(9 + 4 * (5 * 7) + 6 * 8 * (8 + 7 + 9)) + (2 * (4 + 8 * 3)) * 7
((6 * 6 + 3 + 9 + 6) + 3) + ((9 + 2) + 6 + (2 + 7)) * 5 * ((3 + 2) + 9 * 2)
(6 * 7) + 8
(5 * 3 + 8 + (9 * 4 * 4 * 3 * 9 + 2) * 6) * 8 + 4
8 * 7 + (6 * 8 + (8 + 2 + 8 * 3 * 9))
8 * (3 + (8 * 6)) + (2 + 5 + 8 * 3 + 8 * 9)
((9 * 3 + 9) + 8 + 7 * 9) + 5 * (4 + (6 * 7 * 8) * 4 + (5 + 6 + 6 * 2) * 3 * 5) + 8 + 5
4 + (2 + 3 + 5 + (8 * 2 + 7) + 3) * 8 * 3 * 3 * 2
5 + 2 * 6 + (5 + (2 * 5 * 7 + 6) * 5 * 4 + 4) + (2 + 5 * 9 * (2 * 5 * 2 + 5 * 2)) * 6
9 + 5 + 5 + ((7 * 4) * 6) + 3
(2 * 4 + 6 + (6 * 5 * 6 + 5 * 3 * 5) + 4 * 4) * (3 + 5 + 8 + 3 + (5 * 8 * 4 + 4 * 6 + 5) * 8) * 4 + (3 + 6 + 9 + (4 + 6 * 7 * 2 + 5) + (3 + 2 + 8 * 9 * 9))
(2 + 9 * 7) + (2 * 4 * (7 + 3 * 2))
(8 * 4 + 3 * 3) * 9 * 8
(4 * 3) * 6 * 5 * 7 + (4 + 7 + 4 * 6 * 9 * 6)
(7 + 4 + 9 + 7) * 3 * (2 * (7 * 5 * 7) * 5 + 9 * 4 + 3)
2 * 4 * 9 * 7 + (3 * 6 * 5 * 7 + 4)
5 + 5 * 2 * 3
5 + 6 * (8 * 9 + (4 + 7 * 6 + 5 * 8 + 8) + 9 * (2 + 7 + 6 + 5)) + (4 * 4 + 7 * 3) + 6
5 * 8 + 6 + (9 + 3 + (5 + 3 + 2 + 9))
4 * (7 * 2 * 6 * 2 + 6 * (5 + 3)) * (2 + 5 * 5 * 3) + (7 * 7 + (7 + 6) * 5 * 6) * (4 + (3 + 4) + 4 * 5 * (5 + 4 * 9 * 7 * 9 * 6))
(5 * 8 + 3 * 3 + (3 + 8)) * 9 + 3 + 4 + 4
2 + 5 * 2 * 5 * 8 + 6
4 * 7 * 5 + ((2 + 3 + 9 * 4) + 4 * (4 * 2 * 4 + 9 * 7)) * 6
(4 * 5 * 3 * 5) * 3 + 8 * 4
7 + 4 + (6 * (4 * 4 + 7)) + 5 + 9 * 3
(3 * 8 * 7 * (2 + 6) + (8 * 9 + 8 + 3 * 2) + 6) * 2 + 3 * 8
(6 + 9 * 4 * 4 * 9 + (4 + 7 + 7 * 7)) + (4 * 3 * (6 * 7 + 4 + 5 + 8) * 7) * ((5 * 7 * 5 * 9) + 4 + 4 + 8) + 3
8 * 5 * (5 * 8) * 5 + 8 + 9
3 + 7 + (5 + 4) + ((9 * 8 * 4 + 7 + 7) + 6) * (8 + 8 + (4 * 4 + 8 + 4 + 8) * 8 + 2 + (4 * 7 * 4))
9 * 3 * 5 + (3 + 3 + (4 + 8 + 6 + 4 + 9 * 2) + 7 * 7)
((9 * 7 + 8 * 6) + 3 + 2 + 8 + (6 * 6 + 7 * 4) * 6) * 4 + ((8 + 6 * 4 * 7 + 3 + 6) * 6 + 3 * 6 * (5 + 8 + 8 * 6 + 2 + 3)) + 9 + 9 + 6
7 + 3 + 8 + (9 * 2 + (3 * 3 + 6 + 4)) + (6 + 7 * 3 * 2 * 9 + (4 + 5 + 6 + 9 + 2 + 4))
(7 + 5 + 6) * 2 * 7 * (3 * 5)
(6 * 5 * 9 * 4) * 9 * 2 + 3 * 7 * 5
8 * (2 + (4 + 8 * 5 * 7) * 3)
(6 + 2 + 8 * 3 * 8) + ((9 + 8 + 8 + 9 * 3) * (3 * 4) * 2 * 4 + 6 + 5) * 5 * 6 * 4 + 7
(2 * 6) + (7 + 8 + 3)
5 + 4 * 7 * 3 * (3 + 3 + (2 + 3 * 8 + 4) + 9 + 3 * 3) + 3
9 * ((8 * 5 * 8 + 7 + 2) * (6 + 2 * 9) + 2) * 7
(6 * 8 * 8 * (4 + 5 + 3 + 4)) * 9 + (2 + 4 + 2 + 8)
(8 + (2 + 3 * 7) * 5 * 6 * 3) * 5 * 7 + (7 + (7 * 8 * 4 * 5) * 5 * 3 * 4 * 8) + ((2 + 6 * 9 * 2 + 8) + 7 * (5 * 8 * 5 + 6 + 9)) * 2
4 * 6 + 3 + (5 + 5) + 2
5 + (7 + 2) + 7 * 7 + (2 + 5) * 3
(9 + 4 * 7 + (7 * 2 + 8 * 8 * 8)) + 2 * (7 * 9 + 7 + 6) + 5 + 5
9 * 9 + (8 + (8 + 7 + 8 + 2 + 8 + 5) + 6 * 2 * 5 * 6) + 3
6 + (9 + 5 * 3 + 6 + 8) + 3
2 * 4 * 2 + 9 + 3 * ((8 * 6 * 9 + 7 * 6) * 3 * 2 + 9 + 9)
6 * 3 + (4 + 8 + (3 + 5 + 5) * 6 * 2 * 3) + 6 * 5 + 9
(7 * 8 + 9) * 7 * (6 + 5) * (4 + 8 * 5 * 6 * 9) * 4
5 * (7 * 3 + 3 * 4 * (2 * 3 * 9))
6 + 6 * 3 + 7 * (4 + 4 * 5) * (6 + 2)
7 + 8 * 9 * 3 * 8 * 2
3 * 2
8 * ((3 * 4 * 3) * 9 + 9 + 9) * 2 * 4 + 6 * 4
3 + (4 + 5 + 5) + 4 + 6
(4 * 7 * 5 + 8 * 7) * 4 * (6 * 6 + 4) * 4 + (2 + 7 + 2 + 8 * 6)
(2 + 2 + 8 + 9 * 9) + (9 * 4 * 2 * 9) * 9
(8 * (2 * 7 + 9) * 4) * 4 * 5 + 2 * 8
((7 + 8 + 6) + (9 + 8 * 7) + 6 * (5 * 8)) * 4
4 + (3 + (5 + 2 * 3 * 3 * 3) * 2) * (7 + 2)
5 + (5 + 3 * 4 * 6 + 6)
(4 + 4) + 7 + 8 + 6 * 5
5 * (6 + (6 + 6 * 2 + 9) + 8 * (2 * 6)) * 6 * 9
(4 + 7 * 6 * 9) + 6 * (9 * 7) * 4 * ((6 + 7) + 5 + 9 * 5 * 5 + 2)
(4 + (6 + 8 + 4 * 9) * 8 + (5 + 3 + 7)) + 2 * 3 * 9 * 3
9 * 9 + 9 + (4 * 9 * 3 + 4) * 9 * 6
2 * (6 + (8 + 7 + 6) * 9 * 6 * (2 * 8 * 3)) * ((9 * 7 + 6 * 3) * 8 * 5 + 8 + (7 + 7 + 7 * 5) * 5) + 2
6 + (7 + 8 * (5 + 4 * 3 * 2 + 2)) + (4 + 8 + 5 + 7 + 7 * (7 * 6 + 2 * 8 * 6 + 4)) * (6 * 9) * 9 * 9
7 * (5 * 7 * 5 * (7 + 7 + 9 + 5 * 2) * 3 * 3) * (4 * 9)
7 + 2 * 9
(9 + (6 + 3)) * 3 + 9 + 3 * 9 * (8 * (4 + 3 * 9))
7 + 2 * 4 * 5 * (6 * 5 + 3 * 3 * (5 * 8 + 7 * 5) * 7)
6 * (6 * 6 + 5 * 2) + 8 * ((4 + 2 * 7 + 9 + 9) * 4 + 5 * 5 * 2) * 3
3 * ((7 * 2) * 2 + 5 + 3 * 2 + 5)
9 * (4 + 3 * 6 * 4 * 6 + 3) + 7
2 * 8 + (2 + 9) * 8 + (9 + (5 * 8) + 2) * 6
(4 + (2 * 7 * 8 * 5 * 9) + 6 + (8 + 2 * 9 + 6) * 5 + 8) + 7 + 7 + 7
8 + (3 + 7 + 5 * 8) + 2 * (4 * 3)
9 + (2 * 5 * 2) * (2 + 4 + (4 + 4 * 7 * 9) * 6 + (8 + 9 * 3)) + ((2 * 7 * 8 + 5 * 5 + 5) * 6 * 9 + 5 * 9) + 2
7 + (4 + (2 * 4 + 6 + 3 + 8 + 5) + 2 * 5 + 3)
(7 + 4 + 9 * 7 + 2 + (5 * 8 * 8 + 2)) + 2 + 7
8 * (8 + 4)
5 * (3 + 8 * 4)
8 + (5 * 4 + 3 + 5)
3 * 5 * 9 * 5 + 8 + 8
2 * 4 * ((3 * 3 * 7 * 2 + 7) + 9) * 4 + 3
9 + 8 + (4 + (6 * 4 * 3 * 8) * (8 + 6 * 3) + 7)
3 * (3 + 6 * 7 + 8 + 4 + (5 * 4 + 3 + 4 * 6)) * 4 + 3 + (5 * 3 + (8 * 8 + 6 * 3 + 6 * 9) + 2 + 9)
(5 + 5 * 7) + 3 * 2 + (8 * 4 + 3 + 4)
(7 * 8 * (2 + 6 + 8) + 6) * 5
7 * 8 + ((6 * 9) * 5 * 5 * 9 + 9) + (7 + 8 + 2)
8 * 4 * 4 * (7 + (5 * 4 * 4) + 3 * (4 + 8 * 7) * 2 * 9) * (4 + 5) * 6
(2 * 3 + (3 * 4 + 7 + 5 + 2 + 2) + 7) + 7
(6 * (8 + 6 * 3 + 7 * 4 + 7) + 2 + (5 + 2 + 2 + 5 + 4 * 7) * 6 + (2 + 4 * 7)) * 3 + 7
3 * (2 * 8 * 7 + 6) * 8 + 7 * ((7 + 2 + 3 + 2) * 8 + (3 * 2 + 7 * 7 + 8 + 3) * 8 + 3 + 9) * 2
(9 * 2 + 4) + 4 * (7 * 2 * 5 * 3 * 6)
(3 + 9 + 2 * 5) * (6 * 6) * 9 * (4 + 7) * 9 * 7
(5 + 8 * 6 * 5) + 6 + (3 + 9 * 8 * 2) * 7
6 + ((9 + 7 + 2 * 7 + 2 + 7) * (5 + 5 * 8 + 9 + 3 + 4) + (9 * 7 + 7 * 7 + 9) + 4 * 6 + 6) + 6 + 2 * 3
(4 + (4 + 4 + 7 + 5 + 8)) + (7 + (2 * 8 + 4 + 6)) + 8 + 8 + 2
7 * (4 * 8 * 5 * (4 * 3 * 4 + 2 + 7) + 6 * 6)
9 * 4 + 4 + ((9 + 3) * 5 + 5) + 6
(4 * 9 + 3 + (9 * 6 + 4 * 6 + 3) * 8) + 3 + 9 * 4 + 8 * 6
(3 + 3) + 8 * 4 * 6
8 + 7 * (4 + 4 * (6 + 3 + 3 + 4 + 7 + 4) * (2 + 8 + 9 * 4 * 7) * 4 * (7 + 2 * 6 + 8 * 2 + 5))
6 * (2 + (4 * 9 * 8) + 8 + (8 + 6 + 3 * 8 * 5 * 7) + 9) + 8 * 9
(8 + 5) + (4 * 5 * 2 * 2 + 4 + 6) + (8 + 7 * 2)
9 * (7 + 3) * 7 * (6 * 9 + 4) * 4
2 * 4 + (9 + 8 + 3 + 5 + 9 + (4 + 7 * 6 * 7 + 9)) * 9 * 3
9 * (7 * 3) + 4 * 7 + 2
7 + 9
2 * (7 + 7 + 4 + 9 * 5) * 8 + 3
3 + 9 * 7 * (7 * 8 * 5 * 3)
((4 + 6 + 6 * 9 * 9) + 2 + 8 + (5 + 8 + 2)) + 5 * 5 + 7
(9 + 9) * (6 + (5 + 7 + 3 * 4) * 7) + (4 * 7 + 2 + 9 + 9) * 9 + (8 * 4 * 2)
5 * (7 * 5) * 3 + 3 * 5 + 7
9 * ((9 * 4 + 2 + 6 * 2 * 5) * (8 + 7) * 7 * 7 * 8 + 9) + 7 * 9 + (8 * 8 + 4 * 4 * 4)
9 * 9 + (4 + 9) + 7 + (5 * (7 + 7 + 9 + 4 * 4) * (5 + 9 * 7 + 5 * 9 * 2) + 7 + 2)
7 + 8 + 4 + ((3 + 4) * 2 + 3 * 5 + 9 + 6) * 6 * (9 * 6 + 9 * 8 * 5 * 8)
4 + (4 + 7 * (5 * 6 * 3 * 9 + 8) * 4) + 6 + 6 * ((8 + 7 * 7 + 5 + 2) + 3 + (8 + 3 + 3 + 2 * 9 + 7) * (8 + 5 + 7 * 9 + 2) + 6 + 5)
8 * 8 * 9 + (3 * 4 * 4 * 7 * (8 * 2 * 3 + 3)) * 2
((4 * 5 * 4) + 3) + 6 * 6 * 4 * 5
3 * 3 + 5 + (7 + 3) * 9 * 6
((7 * 3 * 7 + 3 * 7) + 4) + 2 + 4 + 7 + 8
6 + (8 * 9 * 6 * 3 * (5 * 9 + 7 * 5)) * (6 * 6 + 7 * 7) + 2 + 4 * 3
(2 * (8 * 2 * 3 * 3) * 3) * (2 + 5 * 9) + ((9 * 6 + 6 + 8 + 3 + 6) + 3 * 5 + (3 * 8 + 8 * 2 + 9) + 3 + 6)
4 + 5
(7 * (6 * 9 + 5 * 6 + 3) * 3 * (3 * 7 * 2 * 3 + 7 * 9)) * 9
(8 + 2 + 9 * 6 * (9 + 5 + 4 + 2) * 5) * 9
(6 + 6) + (7 + 9 + 8) + (7 + 3 * (6 + 2 + 8 * 5 * 7) + 7 * 3 + 7) * 3 + 3 * 6
6 * 8 + ((6 + 4 * 3) + (3 * 2 + 4) + 9 * 7) * 4
(7 * (2 * 4 * 5 + 9)) + 9 + (8 * 2 + (2 * 4 + 9 * 2 * 5) + 3 + 6 + 8) * 9 * 8
8 * 7 * 8 * (4 + 4)
(4 + 8 + (8 + 7 * 3 + 4 * 2 * 7) * 5 * (9 * 9 * 7 + 3 + 9 + 5)) * 9 + 4 * 3 * (8 + 7 + (9 * 2)) * 3
6 * 5 * 8 + (2 + 3 * 7 * 4 * 2)
2 * (7 * 7) * (6 + 7 + 2 * 3 * 7) * 2 * 5 * 7
7 * 2 * (3 * (2 * 5 * 7 + 3 * 8)) + (9 * (6 * 6 * 7 * 3) + (4 + 3 + 2 + 9 * 8) + 5 * (7 * 2 * 3 * 8 + 5 * 7)) * 8
((2 * 7 + 5) + 3 * 2 * 7) + 4 * 8
4 * (4 + 6) + (4 * 2 * 8 + (3 * 8 + 4 * 8))
3 + 3 * 8 * 6 + (4 + (5 + 5 + 6 + 5 * 5) * 3 * 8 * 4) * 5
9 + 9 * (5 + 7 + 7) * 5
(5 * (7 + 6 * 9 + 6 * 9 + 5) + 3 + (4 * 8 + 5 * 8 * 3) * (9 * 9 + 2 * 2 + 2 * 8)) + 7
((6 * 8 + 5) * (6 + 6 * 4 * 7 + 5 * 5) * 7) * 5 * 8 + 2 * 6 * 8
(3 + 7 + 2 + 2 * 2 + 6) + 4 * 2 * 3
5 * 2 * (7 * 2 + 2 + 8 * 2) + 4 * 4
2 * 6 * 9 + (9 + 2 + 6)
7 * (4 + 7 + 4 * 4) + 8
6 * 8 + 9 * 7 + (2 * (6 + 8 * 5 * 9 * 3 * 6) + 7)
4 * 9 * (4 + 9 + 8 + 7) + 7 + 4 + 7
((8 * 8) * 6 + 6 * (7 + 8) + 3 + 9) + (2 * 9 + 2 * 3 * 7) + (7 + 2 + 5) * 5
9 + 9 + 5 * (8 * 7 * 4 + 8 + 8 * 4) + 4
(2 + (4 + 3 + 7) * 8 + 2) * (7 * 8 * 4 + 5)
7 * (7 * 5 * 8 * (5 + 8 + 6 + 9) * 6 * 6) * 3
(6 + 7 * (6 + 9) + 3 * (2 + 9 + 5) * 5) * 3 * (3 * (4 * 6 + 4 * 5 * 5))
8 + 7 + 4 + (5 + 7 + 9 + 8) + 4 * (4 + 2 + 7)
4 + 2 * 6 + (9 * (3 + 5) * (2 + 7 * 6 + 8 + 8) + 6 * 8 * 7) + 7
(2 * (9 * 2 + 8 * 3 + 2) + (7 * 3 * 5 * 6)) * 2 + 9 + 7 + (4 + 7 * 8 + 9 * 3) + 8
6 * (9 * 8 + (5 + 2 * 5 + 2 * 6 + 6) * 8 + 2)
8 * 2 + (7 * 7 * (9 * 6 + 3)) + 7 + 5 * 4
9 + 3 + 7 + 9 + (5 + (7 * 4 * 6 + 3 + 7 + 3) * 8 + (9 + 4 * 8 * 7 * 7) + 2)
((4 * 4 * 8) + 6 * 4 * 7 + 4 * 7) + 7 * 8 + 3 + 8 + 9
6 * (5 + 2 * (4 + 3 * 5 + 6 * 2 + 6) * 5 * 4 + 4) + 4 + (9 * (7 * 5 * 2 * 4 + 5) + 8) * (5 * (2 + 2) + 7 + (6 * 4 + 3 * 7 * 9))
2 * (7 + 9) * (2 * 2 + 4 * 7 * 6) * 5 + 5 * ((5 * 8 + 3 + 9 * 3) + 6 * 4 + 9)
(4 * 3 + 5 * 7 + 3 + 3) + (3 * 8 * 3 * 4 * 4) * 8 + 5 * 8
6 * 4 * (4 * (3 + 6) + 2)
9 * (7 + 8 + 5 + (9 * 9 * 8 * 6 * 5) * 9)
(6 * 7) * 5 + 5 + 7 + 3 + ((4 + 7 * 5 + 6 + 7) * 3 + 4 * 4 + 3 + (6 + 2 * 3 * 2 + 4 + 8))
3 + 4 * 2 + 2 * 7
(7 * 4 + 9) * 9 + 6
2 * (4 + 7 + 6 + 2 + 5 + 2) * 3 * (5 + (9 * 8) + 4 + 5)
2 * (6 + 5 + 8 * 5 * (7 * 3 * 7 * 7)) * 8 + 2 + (3 + 7)
((3 * 8 + 7 * 8) + 5 * 2 + (7 + 4 + 8 * 3 * 6)) + (5 * 2 * 3 + 2 * 2) + 2 + 5 + 3
3 * 5 * 9 + 4 * ((5 + 5 * 4 * 3) * 5 + 8 + 5)
9 + 7 + (8 + 2 + 4 * 8 + 8 * 3) * 5
(4 + 6 * 4 + 7 + 9 + 9) + 5 + 5 * 5 + (4 * 8 + 2) * 2
(9 + 2 * 8 * 8) + 6 + (6 + 5 + 3) + (8 + 8 + 4) * 7
2 * (9 * 9 + 9 + 7) * ((5 + 9 * 9 * 8 * 4 + 5) + 8 * (3 * 6) + (9 * 9 * 2)) + 6 + ((7 + 9 + 3 * 3) + 4 + (3 * 6 + 2 * 8))
((6 * 5 + 7 + 8 * 9 + 4) + 4) * 6 + 4 * (5 + (7 * 9 + 7 + 9) + 7)
(9 * 3) * (3 + 2) + ((7 * 5 + 8 * 7 + 5) * 2) + 4 + 8
(8 * (4 * 2 * 8 + 6 + 6) * 9 * (8 + 9 + 9 + 7 * 7 * 2) + 2 * 5) + (4 + 3 + 9) + 4 * 2 * 7 + 5
5 * 6 + 9 + 6 + (9 * 7)
(7 * 9 + 9 + 8 * 4) + 5 * (2 + (4 * 5 * 5 + 8) + 3 * 6 * 5) * 7
2 + (9 * 2 * 4 + (8 + 6 * 6 + 6 * 4)) * 7
4 * 5 + (2 * 4 + 6 + (8 * 2) * 9 * 2) + 9
6 * 2 * (7 + 5 + 4 * 3 * 2) * 8
(6 + (5 * 2 * 9 * 6 + 4) + 8) + 7 * 2 * 9 * 8
(8 * 8) * ((9 * 4 * 2 * 4) * (2 + 7) + 6 * 7 * 5) + (9 + 6) * 3 * 6 * ((5 * 5 * 3 + 6 * 5 + 4) + 5 + 5)
5 + 3 * 8 + 7 * 2 + (3 + 3 + 4)
2 * 2 * 3 + 4
(6 + 5 * 3 + (7 * 2 * 8) * 4 * 4) + 2
4 + (2 + (9 * 8) * 2) + (6 + (6 * 3 * 2 * 5 + 4 + 2) + 2 + 8 * 2)
((3 + 9 + 9) + 3) * (3 * 4 + (3 * 8 * 3) + 3 * 4 + 5) + 3 * 5 * 9 * 5
(9 * 7 * 4 * 5) * (9 + 6) + (5 * 4 + 7 * 6 + 9 * 4) * 5
8 + ((2 + 5 * 2 + 4 * 4 + 5) * (2 + 4 * 6 * 8) + 3 * 7 + 8) + 3 + 6
(4 * 6 + (2 + 9 + 5 + 4 * 7 * 2)) + 4 + 9
3 + 6 + 9 * (7 * 6 + 5) * (6 * 7 * 3)
(2 * 6 + (2 * 8 + 2 * 8)) + 4
6 * 4 + 3 * 7 * 9 * (9 * 2 + 6 + 2)
(8 + (8 * 6 + 5 * 3 + 9)) * 4 * 9 + 4 + 5
(8 * 9 * 8) + 7 * 4 * 3 + 5 * (3 + 8 * 2 * 9 * 7 * 8)
5 + 6 + 8 + (4 + 4 + 4 * 5 + (9 * 2 + 6) + 5)
2 * (8 * 5 + 7 + 7 + (3 + 2) * 4) * (9 * (2 + 8 * 7))
(2 * (4 + 7 + 9) * (2 * 3 + 5 * 9 * 5 + 4) * 6) + 2
2 * (5 * 2 + (9 + 8 + 9 + 9 + 6) * 5) * 9 * 8 + 3 * (2 * (3 * 9) * 7 * 4 * (5 * 7) * 6)
(5 + 3 * 4 + 9) + 2
((3 * 9) * (8 + 3 * 3 + 2 + 2) * 3) * 9 * 7 + 4 + (3 + 9 * 3 + (2 + 6 * 7 + 8 + 9) * (6 * 6 + 2 + 3 + 2)) * 8
8 * (3 + 9 + 5) * (5 * (3 * 4 * 7 * 3) * 2 * 8) * 7 + (6 + 6 + 5)
9 + (8 + 2 * 3 + 7 * 3) * 5 * 5 + 7 * 4
6 * 9 + (9 * 5 + 7 * (4 * 5) * 2) + 9 * 4 * 5
8 + 3 + (4 * 6 + (9 * 2 + 4 + 4 + 4 + 8) + 3)
(3 * 6) + 2 * 9
8 * 6 * (2 * 7 * 5 + (8 + 6 + 6) * 4 * (4 * 8)) * 7 + ((4 * 3 + 5 + 2) * 6 + (2 + 6 * 6 * 8 + 8) * 9) + 7
(9 * (7 * 9) * (9 * 8 + 5) + 8 + (2 + 8 * 6 * 9) * (3 * 5 * 7 * 6 + 2 + 4)) + (8 * 9 + 7 + (3 * 5 * 2 * 4 + 9 * 8)) + 6 * 5
(7 * 8 * 2 * 4) + 7 + 8 * 8 * 6 * (6 + 2 * (5 * 2) * 4)
8 * (5 * 4 + 4) * 3 + 4 * 4
7 + 8 + 5 + ((3 * 2 + 3 + 4 * 8) * 7 * 5)
((9 * 7 * 6) + 7) + 7 + 3 + (4 * (2 * 8 * 7 + 2 + 9) + (4 + 2 * 3) + 2 + 4)
(6 + 3 * 6) * 9 * 7 * (4 * 8 * 2 * (5 * 8 * 9 + 4 + 2)) + 3
3 * 7 * 7 + 9 * 9 + (7 + 6 + (3 + 6))
5 + 8 + ((8 * 8 * 4 + 5 * 3 * 5) * 4 + 4 + (5 * 5 * 2)) * 4 * 5
2 * (5 * 4 + (3 * 9 + 9 * 9) * 9) + 6 + (3 * 3) + 9 * 7
6 * 5 + (6 * (8 * 5) * (9 + 7 * 6 * 5) * 9 + 3 * (6 + 9)) + 8
4 + 9 + (5 * 9 + (7 * 6 * 3 * 8) + (8 + 2 + 7 * 5 + 3) + (4 + 7 * 7 + 7) + 9) + 7 + (7 + 2 + 8 + 4)
((6 + 4 * 4 + 5 + 7 + 7) * (8 * 2) * (6 + 3) + (9 + 3 * 4 * 7 + 4 + 9)) + 5
(6 * 2 * 3) + 8 + 9 + (3 * 3 * 2 + 8) * (3 * 9 * 7 + 5 * 5)
7 * 5 * (9 + 5 + 3 * 7 + 8 * 4) * 3 + 2 + 4
(8 + 9) + ((5 * 5 + 5 * 3) + 2 + 8 + 9) * 4 * 2 * 4 * (5 + 4 + 2 * 8 + 7 * 3)
9 * 3 * 6 + (2 * (3 + 8 * 7 * 4 + 6) + 5 + (4 * 7) + 2 * (3 * 9 * 8)) * 7
((6 + 3 + 8 * 6 * 8) * (8 * 6 + 4 + 9 + 4) * (4 + 9 + 2 * 2 + 3) + 7 + (3 + 9 + 3 + 7 + 9 * 6) * 4) + 8
5 * (3 * 4 * 4 + (5 + 7 * 3)) * 3 * 5 * 7
((5 * 5 * 7 + 7 + 4 * 9) + 3) + 4 + 5
(7 * 4 + 6) * 2
6 * 2 * 5 * (8 + 6 + 3 * 8 * 5) * (4 * 3 * 5 + 4 + 5 + 9) * ((4 * 6 + 3 + 9) + 5 + 4 + 2 + 6 + 2)
4 + (5 + 4 + 7 + (8 * 8 + 7 + 6) * 3 * 4) * (2 + 3 + 4 + 9) + 3 + 8
5 * 5 + (7 * 9) + 5
(2 + 3 + 3 + 5 * 6 * 2) * 7 + 8 * (2 + 5 * 8 + 2 + 3 + 5)
2 + 5 * (5 * 7 * 5 * 3) + 2 * (7 + 4 * (5 * 9 * 5) + 6)
5 * 7 + 7 * 4
2 + 8 + 3 + (3 * 8 * 9) + 5
3 + ((2 * 8 + 3) + 3) * 9 * 6 * 6
((7 + 6 * 3 + 6 + 7) * 4 * (9 + 6) + 6 + (5 + 8 + 4 * 7 + 9) * 7) + 9
6 + ((2 * 7 * 6 + 2) * 9) * (8 * 5 * 2 + (2 + 6)) * 4 * 6
(5 * 6 * 4 * 2 * 7) * 2 + 2 + (5 * 8 * (9 + 8 + 7 * 3 + 2 + 6) + 5) + (2 + (9 * 4 + 3) * 9 * 2 * 4 + 8) * 6
((7 * 8 + 2) * 8 * 6 * 5) + 4 + ((8 + 3 * 9 + 7) + 8 * 5) + (2 + 5 + 8) * 4
3 * (4 + (7 + 2 * 4) * 8 * 6)
9 * ((6 + 8 + 2 * 3) * 2 + 7 + 4 + 9 + 5) + 6 + 9
6 + 7 + (7 * 7) + (8 * 9 + (9 + 9) + (6 * 5 * 9 + 9 * 4)) * 3
(5 + (3 * 5) + 5) + (3 + 5 * (4 + 7 + 7 * 8) * 8 * 2) * 7
5 * 7 + ((9 + 3 * 8) + 3 * 3)
2 * (8 + 8) * (4 * 9 * 9 * (6 + 8 + 3)) * 7 * 7 + 8
9 + ((6 * 4 * 9 + 3 + 7) * 5 * 9 + 9 * (2 * 8 + 3 + 7 * 9 + 4)) + 8 + 6 * 8 * 9
(8 + 3 + 9 + 7 * 6) * 6 * 2 + 7
7 * (5 * 4 * 8 + (9 * 7) * 7) * 8 + 3
(5 + 5 + (3 * 9) * 3 * (6 + 2 * 5 * 4 * 5) * (8 * 7 * 9 + 9)) + 9 + ((6 * 2 + 9 + 5 + 6) + 4) * 3 * 8
4 + 4 + 7 + 2 + (4 * 5 + 2)
5 + 8 * (5 * (6 * 5 * 7))
((8 * 5 + 8 + 4 * 9 + 4) * 5 * 2 * 5) + 6 + 5
4 + ((2 + 6 * 3 + 5) + 9 * 3 * 6 + 4 * 7) * (7 * 6 * 4)
5 * (4 + 2 * 8 * 3 + 8 * 8)
5 + 2 + (2 * (2 + 4) * (3 * 3 * 7 * 6 + 5 * 7) * 8 + 4) * (8 * 9 * (5 + 3 + 8 + 4 * 9 * 7))
8 + ((5 + 4 + 9 + 3 + 8) + 9 * (3 * 2) + (6 + 5)) + ((8 + 7 * 2 * 4) * 5 + 4 + 5 + 2 * (2 * 3))
(8 + (7 + 6 + 9 + 2 * 6 + 4) * 2 + 5) * (3 + 6 * 9 + 6 + (8 + 9 + 4 * 4 + 2 * 7) * 6) + 4
8 + ((5 * 4) + 7) * 2 * 3 * 7
(3 + 4 + 2 + 8 + 2 + 4) + (2 + 6 + (7 * 8 * 4) + 3) + 3 + 2 * 9 + 5
6 * 8 * (8 * 9 + 5 + 8)
((8 + 2 + 5 * 8 * 9 + 4) * 8 + 9 * (9 + 2 * 6)) + 3 * 3 + 9 * (5 * 4)
((2 * 9) + 7 + 7 * (7 + 8 * 4 + 2)) * 6 + 6 + (4 * 2 * 7)
7 + ((2 + 8 + 7 + 4) * (4 + 2 + 9 + 2 * 9) + 2 + (6 * 8 + 5 * 2 * 3) + 5) + 7 * (6 + 8) * 5 + 2
8 * 5 + 3 + 7 * 7
(6 * 3 + 2 * 5 + 6) + 5 * (4 + 9 * 2 * 8 * (7 * 7)) * 7 + 9
2 * 7 * ((5 + 7 * 5) * 6 + 3 * (2 * 3 + 8) + 5 * (9 + 7 + 5 * 3 * 6)) + (7 * (8 * 5 + 7 * 4) * 9)
((6 * 9 + 8 * 8 + 2 * 8) + 8 + 5 + 4 * 7 * 4) + 7
5 * 6 * (3 * 3 * 6) * 6 * 7 * 9
2 + 3 + ((6 + 5) * 7 + (2 * 4) + 7) + 6
(7 + 8 + (2 + 4 * 9 * 8 * 5)) + (3 + 8 * 7)
9 + ((3 + 4 * 8 + 3 * 4) + 2 + 9 + (8 * 7 + 3 * 4 * 7 * 8) + 3) * 2 + 4 * 6
4 + ((2 + 9 + 4) * 3 + (7 + 3 + 2) * 5 * 3 + 2)
2 * 4 + 8 + 2 + 5 * (4 + 6)
(9 + 8 + 9 + 7) * 8 + 4 * 8 * (9 + 9 * 6) * 8
3 + 5 + (6 * 8 * 2 + (6 * 9) * 6 * 8)
3 + 4 * 2
6 * (3 * 2 + 3 + (6 + 3 + 7 * 4 + 2 * 7)) + 6 * 9 + 9 * 7
8 + 6 + 4 + 4 + (6 * 3 + 9) + 7
(4 + (3 * 5 * 7 * 7 + 4) * 5) * 2 * 6
8 + 4 + (5 * 5) + (6 + 8 * (7 + 3 + 7 * 7) + (6 + 4 + 9 * 8) * (2 + 6 + 7 + 4 * 3 * 7)) * (8 * 7 + 9)
((4 * 6 * 3 + 5 * 6 + 9) + 4 * 7 + 2 + 5) + (3 * 6 + 4) + (7 + 8 + 8)";
    }
}
